# -*- coding: utf-8 -*-
"""predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gcb8cx2fRtuz0J3YAVTvGlAaVgFMT8tX
"""

from google.colab import drive

drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
from keras.preprocessing.image import load_img, img_to_array
from keras.models import load_model
import numpy as np
import glob
import matplotlib.pyplot as plt
# %matplotlib inline

#pegando todas as imagens do link (só tem 10 imagens)
test_set = glob.glob('/content/drive/My Drive/Colab Notebooks/Testes do Projeto/Imagens_teste/*.jpg')

# pegando o modelo N0
modelN0 = load_model('/content/drive/My Drive/Colab Notebooks/Testes do Projeto/Testes Nathan/Teste N0/model_healthy_N0.hdf5')

# pegando o modelo N1
modelN1 = load_model('/content/drive/My Drive/Colab Notebooks/Testes do Projeto/Testes Nathan/Teste N1/model_healthy_N1.hdf5')

# pegando o modelo N2
modelN2 = load_model('/content/drive/My Drive/Colab Notebooks/Testes do Projeto/Testes Nathan/Teste N2/model_healthy_N2.hdf5')

#pegando as imagens e normalizando 
image_test = np.array([img_to_array(load_img(image_name, target_size=(256, 256), color_mode='rgb'))/255 for image_name in test_set])

#modelo classificando as imagens
y_pred = modelN1.predict(image_test)

# resultados verdadeiros 
y_true = [0,1,1,1,0,0,0,1,0,0]


labels = ['Doente', 'Saudavel']

#mostrar as imagens
figure = plt.figure(figsize=(20, 8))


for i in range(10):
  #montando as configurações de exibição da imagem 
  ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])

  # le as imagens 
  im = plt.imread(test_set[i])
  ax.imshow(im)

  # pega o resultado que o modelo preveu 
  predict_index = np.argmax(y_pred[i])
  true_index = y_true[i]

  # passando o titulo da imagem
  ax.set_title("{} ({})".format(labels[predict_index],
  labels[true_index]),
  color=("green" if predict_index == true_index else "red"))